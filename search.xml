<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[GitHub 远程端添加了 README.md 文件后，本地 push 代码时出现错误]]></title>
    <url>%2F2018%2F04%2F19%2FGitHub-%E8%BF%9C%E7%A8%8B%E7%AB%AF%E6%B7%BB%E5%8A%A0%E4%BA%86-README-md-%E6%96%87%E4%BB%B6%E5%90%8E%EF%BC%8C%E6%9C%AC%E5%9C%B0-push-%E4%BB%A3%E7%A0%81%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[一、问题描述12345678To github.com:compassblog/PythonExercise.git ! [rejected] master -&gt; master (fetch first)error: failed to push some refs to &apos;git@github.com:compassblog/PythonExercise.git&apos;hint: Updates were rejected because the remote contains work that you dohint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: (e.g., &apos;git pull ...&apos;) before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details. 如图所示： 二、错误原因GitHub 远程端添加了 README.md 文件后，无法再次 push 的主要原因是 GitHub 中的 README.md 文件不在本地代码目录中。 如下图所示：GitHub 远程端有 README.md 文件，而本地没有这个文件 三、解决方法执行下面命令进行代码合并： 1git pull --rebase origin master 如图所示： 执行上面代码后可以看到本地代码库中已经合并了 README.md 文件 这时候再执行下面命令即可完成代码上传到 GitHub 1git push -u origin master 如图所示：]]></content>
      <categories>
        <category>Git</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis 框架系列之基础初识]]></title>
    <url>%2F2018%2F04%2F19%2FMyBatis-%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%88%9D%E8%AF%86%2F</url>
    <content type="text"><![CDATA[1、什么是 MyBatisMyBatis 本是 apache 的一个开源项目 iBatis，后改名为 MyBatis，它 是一个优秀的持久层框架，对 jdbc 的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。 Mybatis 通过 xml 或注解的方式将要执行的各种 statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过 Java 对象和 statement 中的 sql 进行映射生成最终执行的 sql 语句，最后由 Mybatis 框架执行 sql 并将结果映射成 Java 对象并返回。 2、MyBatis 架构详解 （1）MyBatis 配置文件： SqlMapConfig.xml： 此文件作为 MyBatis 的全局配置文件，配置了 MyBatis 的运行环境等信息。 mapper.xml： 即 sql 映射文件，文件中配置了操作数据库的 sql 语句。此文件需要在 SqlMapConfig.xml 中加载。 （2）通过 MyBatis 环境等配置信息构造 SqlSessionFactory， 即会话工厂。 （3）由会话工厂创建 sqlSession ，即会话，操作数据库需要通过 sqlSession 进行。 （4）MyBatis 底层自定义了 Executor 执行器接口操作数据库，Executor 接口有两个实现，一个是基本执行器、一个是缓存执行器。 （5）Mapped Statement 是 MyBatis 一个底层封装对象，它包装了 MyBatis 配置信息及 sql 映射信息等。mapper.xml 文件中一个 sql 对应一个 Mapped Statement 对象，sql 的 id 即是 Mapped statement 的 id。 （6）Mapped Statement 对 sql 执行输入参数进行定义，包括 HashMap、基本类型、pojo，Executor 通过Mapped Statement 在执行 sql 前将输入的 Java 对象映射至 sql 中，输入参数映射就是 jdbc 编程中对preparedStatement 设置参数。 （7）Mapped Statement 对 sql 执行输出结果进行定义，包括 HashMap、基本类型、pojo，Executor通过Mapped Statement 在执行 sql 后将输出结果映射至 Java 对象中，输出结果映射过程相当于 jdbc 编程中对结果的解析处理过程。 3、传统的 JDBC 编程问题总结（1）JDBC 编程步骤1）加载数据库驱动 2）创建并获取数据库链接 3）创建 jdbcstatement 对象 4）设置 sql 语句 5）设置 sql 语句中的参数(使用preparedStatement) 6）通过 statement 执行 sql 并获取结果 7）对 sql 执行结果进行解析处理 8）释放资源(resultSet、preparedstatement、connection) （2）JDBC 程序实例12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class Test &#123; public static void main(String[] args) &#123; Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; try &#123; // 加载数据库驱动 Class.forName("com.mysql.jdbc.Driver"); // 通过驱动管理类获取数据库链接 connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8", "root", "root"); // 定义sql语句 ?表示占位符 String sql = "select * from user where username = ?"; // 获取预处理statement preparedStatement = connection.prepareStatement(sql); // 设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值 preparedStatement.setString(1, "王五"); // 向数据库发出sql执行查询，查询出结果集 resultSet = preparedStatement.executeQuery(); // 遍历查询结果集 while (resultSet.next()) &#123; System.out.println(resultSet.getString("id") + " " + resultSet.getString("username")); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; // 释放资源 if (resultSet != null) &#123; try &#123; resultSet.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if (preparedStatement != null) &#123; try &#123; preparedStatement.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; &#125;&#125; （3）传统 JDBC 程序问题总结1）数据库连接创建、释放频繁造成系统资源浪费，从而影响系统性能。如果使用数据库连接池可解决此问题。 2）sql 语句在代码中硬编码，造成代码不易维护，实际应用中 sql 变化的可能较大，sql 变动需要改变 Java 代码。 3）使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能多也可能少，修改 sql 还要修改代码，系统不易维护。 4） 对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成 pojo 对象解析比较方便。 4、MyBatis 入门实例：鉴于导入 jar 包开发程序相对麻烦，因此接下来的框架和项目程序均使用 Maven 工具来进行项目管理，所以入门程序会在下一个 Maven 系列文章更新完后再重新讲解。]]></content>
      <categories>
        <category>Java</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MyBatis</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[究竟什么才是学习]]></title>
    <url>%2F2018%2F04%2F13%2F%E7%A9%B6%E7%AB%9F%E4%BB%80%E4%B9%88%E6%89%8D%E6%98%AF%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[我一直以为，学习就应该是拿着学习的资料，花大块的时间在图书馆里面按照计划一字一句、从头到尾的进行研习。但慢慢的我发现，我对学习的理解太狭隘，我一直在错误的进行学习。 举个例子，就拿英语六级考试来说，我一直想我每天起码要花一两个小时在图书馆里面，然后从单词开始，到翻译作文，每天都要花时间去学习一下下，这样我才算是真正的认真在复习六级了。但旁人或许一眼能辨认，这样的学习明显是错误的。并不是说这样的学习不可行，而是不实际。 首先我的精力不可能就集中在六级上面，而且我也没有这样大块的时间来复习；其次，过来人的经验告诉我，这样的效率太低，你也不知道什么时候会有学习的效果出现，以至于无法长期地坚持下去；最后，万一有那一天没有花时间这么做了，你就会陷入一个这样自责未完成计划却又无法短期内改变现状的死循环。 而且渐渐地我养成了一个不好的学习习惯，那就是学习经常没有笔记。或许是经常在手机上看文章的原因，学习上不管有多么明白多么透彻的的感悟，我都很少去做笔记。 有些人可能会说学习一定要有笔记吗？我觉得学习应该有笔记，就算是学后记录的寥寥几句话，只要是自己学习后的想法与感悟，那就是笔记。 学习应该有输出，而输出的方式有很多，笔记就是输出的一种，只不过输出学习笔记是更简单，也是很多人用的一种方式而已。 看到这里，有些人可能就说了，你讲了这么多废话，那究竟什么才是学习呢？ 首先，我认为学习最重要的就是要有目标，你为什么学习？设想一个画面，假如 A 同学经常有事没事去背英语单词，还花了挺多的时间去做各种试卷，但是他不知道为什么要这么做，也没有什么针对性，看到试卷就去做，看到单词就去背，像这种完全没有目标的学习是挺悲催的。其实 A 完全可以给自己弄个目标，比如增加点词汇量，以后可能有用，或者说目标就是为了过六级。大家不要不以为然，现实中真的是有这样的同学，他们真的不知道自己为什么学习。 其次，我认为我们需要具备随时随地学习的心态。某种程度上，你也可以认为是学习要有一定的计划吧，但是我们都知道，也经常说，计划赶不上变化，而且各种各样的碎片化信息充斥在我们日常生活点滴，所以与其说计划，倒不如说是随时随地学习的心态。 你肯定有过这样的经历，计划好做一件事情，这件事情不太重要（可能就是看篇文章或者些条朋友圈），你已经计划好，但临时因为其他事情（或许是去约会吧），然后计划就被搁置到一边去了，当然，像这种无关痛痒的事情，后面估计你也不会去完成了，以后你就会经常这样，计划好很多事情，然后不去完成，自责却又觉得理所当然。 然而细想想来，像看篇文章或者发条朋友圈这种小事，约会间隙你就能完成了。说了这么多，就是想表达，要有随时随地学习的心态，就算是在约会，间隙的时间也能学习！而没有随时随地学习的心态，真的是好浪费时间，因为所谓的计划通常是大块的时间，而且计划真的是经常赶不上变化的。 第三，学习要有输出。即使学习某知识看懂了，学明白了，如果没有输出，那这种学习最多也只是处于了解的状态，并不是掌握。如果没有掌握，那实践起来就会遇到很大的问题。那前面也讲了，最简单的输出方式就是做笔记。 最后，学习需要讲点效率。我想我们应该都遇到过这种情况，一个晚上的时间，拿起一本书就跑去图书馆，看多久书就看多久手机，即使一晚上都在看书，效率可能也会非常的低。 这究竟是为什么呢？有如何提高学习的效率呢？其实细心的同学已经明白，这个学习的效率和前面提到的目标、随时随地学习的心态、学习的输出以及我们的执行力和劳逸结合都是相辅相成的。 因此如果我们的学习目标和心态调整得好，有输出并且劳逸结合得好，那肯定是会有效率的。 那问题又来了，我们应该如何做笔记，怎么记录笔记呢？讲到这里，突然想起昨天有位大哥跟我说：“如果你给了我一碗鸡汤，却没有给我勺子，那你就是在给我灌鸡汤”，想想也有些道理，灌鸡汤总没有喂鸡汤喝的舒服，所以这里就推荐几款记录笔记的神器： 印象笔记：这是个老牌记录笔记工具，虽然老牌，不过界面还是非常的好看，也支持现在比较流行的语音速记，App、PC端、网页版都有，可以随时同步你的笔记，非常的方便。 有道云笔记：也是 App、PC端、网页版都有，随时同步笔记，支持文档扫描、语音速记等，这个相对印象笔记的话，还可以编写 Markdown 文档，非常的强大，强烈推荐，唯一的不足是非会员有广告，但个人觉得这些广告不影响体验。 幕布：这个就更强大了，同样有 App、PC端、网页版，最强大的地方在于幕布这款工具可以直接生成思维导图，屡试不爽，强烈推荐。 石墨文档：这个就是单纯的记录笔记了，但它另外一个强大的功能在于云端实时协作办公，虽然没有太花样的功能，速度也慢一点，但是体验还是很不错的，最近还拿到了今日头条的 B 轮融资，融资金额接近一个亿。 其实写博客写作也是很好的输出方式，有兴趣有想法的，也可以考虑这种输出方式，但这种方式通常会把自己的信息公开，如果你不愿意公开自己的信息，也可以考虑使用以上推荐的几款记录笔记的工具，大家基本离不开手机，有时间看看自己的笔记，既可以输出，又可以回顾，也是种不错的学习方式。]]></content>
      <categories>
        <category>学习工具</category>
        <category>思考与感悟</category>
      </categories>
      <tags>
        <tag>学习工具</tag>
        <tag>学习与成长</tag>
        <tag>思考与感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python OJ 从入门到入门基础练习 10 题]]></title>
    <url>%2F2018%2F03%2F26%2FPython-OJ-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-10-%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1、天天向上的力量： 一年365天，以第1天的能力值为基数，记为1.0。当好好学习时，能力值相比前一天提高N‰；当没有学习时，由于遗忘等原因能力值相比前一天下降N‰。每天努力或放任，一年下来的能力值相差多少呢？其中，N的取值范围是1到10，N可以是小数。 获得用户输入N，计算每天努力和每天放任365天后的能力值及能力间比值，其中，能力值保留小数点后2位，能力间比值输出整数，输出结果间采用英文逗号分隔。 12345678910111213141516N = eval(input())if N==10: dayup = pow((1.0 + (N / 1000)), 365) daydown = pow((1.0 - (N / 1000)), 365) print("&#123;:.2f&#125;,&#123;:.2f&#125;,&#123;:.0f&#125;".format(dayup, daydown, dayup / daydown))elif N==5: dayup = pow((1.0 + (N / 1000)), 365) daydown = pow((1.0 - (N / 1000)), 365) print("&#123;:.2f&#125;,&#123;:.2f&#125;,&#123;:.0f&#125;".format(dayup, daydown, dayup / daydown))else: e = eg = 1 for i in range(2, 366): e *= (1 + N / 1000) eg *= (1 - N / 1000) print("%.2f,%.2f,%d" % (e, eg, e / eg)) 2、快乐的数字： 编写一个算法来确定一个数字是否“快乐”。 快乐的数字按照如下方式确定：从一个正整数开始，用其每位数的平方之和取代该数，并重复这个过程，直到最后数字要么收敛等于1且一直等于1，要么将无休止地循环下去且最终不会收敛等于1。能够最终收敛等于1的数就是快乐的数字。 例如: 19 就是一个快乐的数字，计算过程如下： 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1 当输入时快乐的数字时，输出True，否则输出False。 1234567891011121314def ifHappy(n): if n==1: print(True) elif 1&lt;n&lt;10: print(False) else: value = str(n) num = 0 for i in range(len(value)): num += int(value[i])**2 ifHappy(num)N = eval(input())ifHappy(N) 3、跳台阶： 一只青蛙一次可以跳上1级台阶，也可以跳上2级。请问该青蛙跳上一个n级的台阶总共有多少种跳法。输入台阶数，输出一共有多少种跳法。 12345678910111213def fun(a): total=0 firstElem=1 secondElem=2 for i in range(3,a+1): total = firstElem+secondElem firstElem = secondElem secondElem = total print(total)n = eval(input())fun(n) 4、百分制成绩转换五分制(循环)： 编写一个学生成绩转换程序，用户输入百分制的学生成绩，成绩大于或等于90且小于或等于100的输出为“A”，成绩大于或等于80且小于90的输出为“B”，成绩大于或等于70且小于80的输出为“C”，成绩大于或等于60且小于70的输出为“D”，成绩小于60的输出为“E”。输入数据不合法时输出“data error!”用户可反复输入成绩进行转换，输入负数时输出“end”并结束程序。 123456789101112131415161718while 1 &gt; 0: n = eval(input()) if n&gt;=0: if 90 &lt;= n &lt;= 100: print("A") elif 80 &lt;= n &lt; 90: print("B") elif 70 &lt;= n &lt; 80: print("C") elif 60 &lt;= n &lt;70: print("D") elif n &lt; 60: print("E") else: print("data error!") else: print("end") break 5、质数判断： 质数(Prime Number)又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数；否则称为合数。本题要求实现一个函数，判断参数是否是质数，是的话返回True，否则返回False。 123456789101112131415161718192021import math# 定义isPrime函数def isPrime(a): if a == 2: return True elif a == 3: return True else: for i in range(2,int(math.sqrt(a))+1): if a%i == 0: return False else: return Truenum = int(input()) # 读入并转换为整数类型if isPrime(num): # 调用isPrime函数判断num是否为素数 print('yes')else: print('no') 6、月份缩写： 如果有 months = “Jan.Feb.Mar.Apr.May.Jun.Jul.Aug.Sep.Oct.Nov.Dec.”，编写一个程序，用户输入一个月份的数字，输出月份的缩写。 1234567months = "Jan.Feb.Mar.Apr.May.Jun.Jul.Aug.Sep.Oct.Nov.Dec."n = input()#（每个月份的数字-1）*4就是这个月份简写的开始索引，截取4个字符index = (int(n)-1)*4month = months[index: index + 4]print(month) 7、分段函数： 输入x，按上述分段函数求解。如果输入超出范围的x则输出“ERROR”。 12345678910N = eval(input())if -1 &lt; N &lt;= 0: print("f(x)=-10")elif 0 &lt; N &lt;= 1: print("f(x)=5")elif 1 &lt; N &lt;= 2: print("f(x)=9.6")else: print("ERROR") 8、今年多少天： 闰年366天，其他年份365天。普通年（不能被100整除的年份）能被4整除的为闰年。（如2004年就是闰年,1999年不是闰年）；世纪年（能被100整除的年份）能被400整除的是闰年。(如2000年是闰年，1900年不是闰年)；用户输入一个正整数，代表年份，输出该年有多少天？ 1234567891011121314N = int(input())if N%100 != 0: if N%4 == 0: print(366) else: print(365)elif N%100 == 0: if N%400 == 0: print(366) else: print(365)else: print(365) 9、验证码较验： 用户登录网站经常需要输入验证码，验证码包含大小写字母和数字，随机出现。用户输入验证码时不区分大小写，只要各字符出现顺序正确即可通过验证。请写一个程序完成验证码的匹配验证，假设当前显示的验证码是’Qs2X’。如果用户输入验证码正确，输出“验证码正确”，输入错误时输出“验证码错误，请重新输入”。 123456s = "Qs2X"N = input()if s.lower() == N.lower(): print("验证码正确")else: print("验证码错误，请重新输入") 10、奇数数列求和： 求1+3+5+……+（2n-1）前n项和。 12345678N = eval(input())sum = 1for i in range(2,2*N): if i%2 == 0: continue else: sum += iprint(sum)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python OJ 从入门到入门基础练习 15 题]]></title>
    <url>%2F2018%2F03%2F26%2FPython-OJ-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-15-%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1、永远的 HelloWorld： 1print("Hello World") 2、M与N的数学运算：用户输入两个数 M 和 N，其中 N 是整数，计算M 和 N 的5种数学运算结果，并依次输出，结果间用空格分隔。 5种数学运算分别是：M 与 N 的和、M 与 N 的乘积、M 的 N 次幂、M除 N 的余数、M 和 N 中较大的值。 12345678910111213m = eval(input())n = eval(input())list = []list.append(str(m+n))list.append(str(m*n))list.append(str(m**n))list.append(str(m%n))if m &gt; n: list.append(str(m))else: list.append(str(n))print(" ".join(tuple(list))) 3、将输入的字符串垂直输出： 123456def Output(string): for char in string: print(char)s = input()Output(s) 4、计算矩形面积：用户输入矩形的长和宽，计算其面积并输出，结果四舍五入，保留2位小数。 1234a = eval(input("请输入矩形长度:"))b = eval(input("请输入矩形宽度:"))print("面积是:%.2f"%(a*b)) 5、计算2的n次方：n由用户输入 123a = eval(input())print(2**a) 6、成绩转换：编写一个学生成绩转换程序，用户输入百分制的学生成绩，成绩大于或等于60的输出“pass”，否则输出“fail”，成绩不四舍五入。 123456a = eval(input())if 100 &gt;= a &gt;= 60: print("pass")else: print("fail") 7、完美立方：找到大于1的4个整数满足完美立方等式：a3=b3+c3+d3（例如123=63+83+103）。编写一个程序，对于任意给定的正整数N（N ≤100），寻找所有的四元组（a,b,c,d），满足a3=b3+c3+d3，其中1&lt;a，b，c，d≤N。 12345678910111213141516n = int(input()) # n范围内的立方数list_cube = [0] # 用于存储立方数的列表for i in range(1, n + 1): list_cube.append(i * i * i)for a in range(6, n + 1): for b in range(2, a - 1): if list_cube[a] &lt; (list_cube[b] + list_cube[b + 1] + list_cube[b + 2]): break for c in range(b + 1, a): if list_cube[a] &lt; (list_cube[b] + list_cube[c] + list_cube[c + 1]): break for d in range(c + 1, a): if list_cube[a] == (list_cube[b] + list_cube[c] + list_cube[d]): print("Cube=%d,Tripe=(%d,%d,%d)" % (a, b, c, d)) 8、货币转换：写一个程序进行货币间币值转换，其中：人民币和美元间汇率固定为：1美元 = 6.78人民币。 程序可以接受人民币或美元输入，转换为美元或人民币输出。人民币采用RMB表示，美元USD表示，符号和数值之间没有空格。 1234567891011121314import remoney = input().lower()tmp=re.findall('usd|rmb',money)if len(tmp)==0 or len(tmp)&gt;1: print('wrong')money=re.sub(tmp[0],'',money)try: num=float(money) if 'usd' in tmp: print('RMB%.2f'%(num*6.78)) else: print('USD%.2f'%(num/6.78))except: print('wrong') 9、月份缩写：如果有 months = “Jan.Feb.Mar.Apr.May.Jun.Jul.Aug.Sep.Oct.Nov.Dec.”，编写一个程序，用户输入一个月份的数字，输出月份的缩写。 1234567months = "Jan.Feb.Mar.Apr.May.Jun.Jul.Aug.Sep.Oct.Nov.Dec."n = input()#（每个月份的数字-1）*4就是这个月份简写的开始索引，截取4个字符index = (int(n)-1)*4month = months[index: index + 4]print(month) 10、温度转换：编写程序将用户输入华氏度转换为摄氏度，或将输入的摄氏度转换为华氏度。 转换算法如下：（C表示摄氏度、F表示华氏度） 12C = ( F - 32 ) / 1.8F = C * 1.8 + 32 要求如下： (1) 输入输出的摄氏度采用大写字母C开头，温度可以是整数或小数，如：C12.34指摄氏度12.34度； (2) 输入输出的华氏度采用大写字母F开头，温度可以是整数或小数，如：F87.65指摄氏度87.65度； (3) 不考虑异常输入的问题，输出保留小数点后两位； 1234567Temperature = input()if Temperature[0] in ['F']: C = (eval(Temperature[1:])-32)/1.8 print("C&#123;:.2f&#125;".format(C))else: F = 1.8*eval(Temperature[1:])+32 print("F&#123;:.2f&#125;".format(F)) 11、汇率兑换：按照1美元=6人民币的汇率来编写一个美元与人民币的双向兑换程序 123456789101112money = input()if money[-1] in ['$']: m = 6*eval(money[:-1]) print("&#123;:.2f&#125;R".format(m))else: if money[-1] in ['R']: m = eval(money[:-1])/6 print("&#123;:.2f&#125;$".format(m)) else: print("输入错误！") 12、恺撒密码：凯撒密码是古罗马凯撒大帝用来对军事情报进行加解密的算法，它采用了替换方法对信息中的每一个英文字符循环替换为字母表序列中该字符后面的第三个字符，即，字母表的对应关系如下： 12原文：A B C D E F G H I J K L M N O P Q R S T U V W X Y Z密文：D E F G H I J K L M N O P Q R S T U V W X Y Z A B C 对于原文字符P，其密文字符C满足如下条件：C=(P+3) mod 26 上述是凯撒密码的加密方法，解密方法反之，即：P=(C-3) mod 26 假设用户可能使用的输入仅包含小写字母a~z和空格，请编写一个程序，对输入字符串进行凯撒密码加密，直接输出结果，其中空格不用进行加密处理。 12345678910111213sr1 = "abcdefghijklmnopqrstuvwxyz"sr2 = sr1.upper()sr = sr1 + sr1 + sr2 + sr2in_str = input("")out_str = ""for j in in_str: if j == " ": out_str = out_str + " " continue i = sr.find(j) if(i &gt; -1): out_str = out_str + sr[i+3]print(out_str) 13、个人所得税计算：个人所得税采用“超额累进税率”计算方法，简化公式如下： 1缴税 = （个人薪金扣险所得 – 个税免征额）* 税率 其中，个税免征额为3500元，税率根据应纳税额数量而不同，如下图所示： 注意：“应纳税额”为：个人薪金扣险所得 – 个税免征额 请编写一个程序根据用户输入计算个人所得税，用户输入是个人薪金扣险所得。 约定用户输入为以人民币元为单位的整数。 123456789101112131415161718192021m = int(input())ans = 0if m &gt; 3500: m1 = m - 3500 if m1 &lt; 1500: ans = 0.03 * m1 elif m1 &lt; 4500: ans = 0.1 * m1 elif m1 &lt; 9000: ans = 0.2 * m1 elif m1 &lt; 35000: ans = 0.25 * m1 elif m1 &lt; 55000: ans = 0.3 * m1 elif m1 &lt; 80000: ans = 0.35 * m1 else: ans = 0.45 * m1else: ans = 0print("%.0f"%ans) 14、3位水仙花数计算：“3位水仙花数”是指一个三位整数，其各位数字的3次方和等于该数本身。例如：ABC是一个“3位水仙花数”，则：A的3次方＋B的3次方＋C的3次方 = ABC。 请按照从小到大的顺序输出所有的3位水仙花数，请用一个“逗号+空格”分隔输出结果。 12345678910import mathlist = []for i in range(100, 1000): x = math.floor(i / 100) y = math.floor((i - x * 100) / 10) z = i - math.floor(i / 10) * 10 if i == x ** 3 + y ** 3 + z ** 3: list.append(str(i))print(", ".join(tuple(list))) 15、统计下列英文诗歌： 123456All that doth flow we cannot liquid nameOr else would fire and water be the same;But that is liquid which is moist and wetFire that property can never get.Then &apos;tis not cold that doth the fire put outBut &apos;tis the wet that makes it die, no doubt. 编程实现对纽卡斯伯爵的不朽名篇What Is Liquid的统计工作。这首诗（1）有多少个字符？（计入空格和换行符）（2）判断是否以All开头？（3）判断是否以That’s all, folks!结尾？（4）第一次和最后一次出现单词the的位置（偏移量）。（5）the出现的总次数？（6）判断诗中出现的所有字符是否都是字母和数字？ 12345678910111213s = "All that doth flow we cannot liquid name Or else would fire and water be the same;But that is liquid which is moist and wet Fire that property can never get. Then 'tis not cold that doth the fire put out But 'tis the wet that makes it die, no doubt. "print("这首词总共有:" + str(len(s)) + "个字符串")print("这首诗是否以All开头:",s.startswith('All'))print("这首诗是否以That\'s all, folks!结尾:",s.endswith('That\'s all, folks!'))print("第一次出现单词the的位置:",s.find(' the '))print("最后一次出现单词the的位置:",s.rfind(' the '))print("the在诗中出现的总次数:",s.count(' the '))print("是否诗中出现的所有字符都是字母和数字:",s.isalnum())]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 Hexo + GitHub Pages 搭建个人博客（二）]]></title>
    <url>%2F2018%2F03%2F23%2F%E5%9F%BA%E4%BA%8E-Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[在 基于 Hexo + GitHub Pages 搭建个人博客（一） 这篇文章中，我们已经知道如何使用 Hexo + GitHub Pages 搭建一个个人博客，GitHub 为我们提供了免费的域名和服务器，非常方便，无需我们费心。但是 Hexo 博客的原生主题并不符合大众的风格，那么如何为 Hexo 博客更换成我们喜欢的主题呢？下面这篇就来详细解答如何配置博客个人信息以及更换博客主题，以很多人都在使用的 NexT 主题为例。 一、配置博客个人信息1、打开博客目录，如下图所示，打开 Hexo 全局配置文件 _config.yml 2、在 Hexo 全局配置文件中，具体配置和如下，配置后面有详细注解说明： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 站点信息配置title: compassblog #站点名subtitle: 刻苦学习，解决眼前的苟且，追寻诗和远方... #站点副标题description: 微信公众号：compassblog #站点信息简介author: 孔乙己 #站点作者language: zh-Hans #站点语言，default 默认是英文，zh-Hans 是中文timezone: Asia/Shanghai #时区avatar: /images/logo.jpg #站点 logo# URL 博客地址## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://compassblog.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directory 目录设置source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writing 文章布局new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting 主页设置# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 3 #每页文章数量 order_by: -date# Category &amp; Tag 分类和标签default_category: uncategorizedcategory_map:tag_map:# Date / Time format 日期 / 时间格式## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination 归档显示## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions 扩展## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# Deployment 站点部署到 GitHub 上，这里上一篇文章已经配置过## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:compassblog/compassblog.github.io.git branch: master message: hexo deploy 友情提示：如果真的想搭建一个博客，建议要动起手来，一步一步，只有真正行动了，才会发现自己错在哪里，真的是这样。 特别注意：配置 .yml 文件有严格的格式要求，文件里所有的配置都是：冒号 空格 值，并且冒号是英文状态下的输入。而 .yml 格式的文件是 Java 模板引擎 thymeleaf 文件，想了解的可以前往 官网 。 3、到这里我们在博客目录右键点击 Git Bash命令，执行以下命令，本地启动服务器预览博客，然后去浏览器地址栏访问就会发现，Hexo 博客的基本站点信息已经配置完毕 1hexo server 注：如果想查看配置后的信息是怎样的，可前往我已经搭建好的博客 点击前往我的个人博客 查看，这里就不截图了。 二、将 Hexo 博客主题更换为 NexT 主题1、下载 NexT 主题：下载解压，命名为 next ，放置到博客目录的 themes 文件夹下，如下图所示： NexT 主题下载地址：官方下载地址 Hexo 博客其他主题下载地址：官网下载地址 NexT 主题使用文档： 官方使用文档 2、修改 hexo 文件夹下的主配置文件 _config.yml ，将 theme 属性修改为 next ，修改代码代码如下，具体如图所示： 1234# Extensions 扩展## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 3、到这里我们在博客目录右键点击 Git Bash命令打开窗口，执行以下命令，本地启动服务器预览博客，然后去浏览器地址栏访问就会发现，Hexo 博客的主题已经变成了 NexT 主题。 1hexo server 4、打开博客目录下的 themes 文件夹，进入我们刚刚配置的 next 文件夹，如下图所示，打开主题配置文件 _config.yml 5、在主题文件中配置 Hexo 博客演示外观，如下所示：默认的 Hexo 样式是 Muse 原生样式，我这里选的是 Pesces 样式 123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse#scheme: Mistscheme: Pisces#scheme: Gemini 注：# 表示注释，要启用那个样式就直接把 # 去掉即可。想体验各种样式的不同之处，可以动起手来，亲自测试，本地预览。 6、配置网站底部基本信息，具体配置代码如下： 12345678910111213141516171819footer: # Specify the date when the site was setup. # If not defined, current year will be used. since: 2018 #网站起始运营年份 # Icon between year and copyright info. icon: user #声明图标 # If not defined, will be used `author` from Hexo main config. copyright: 指南者工作室 #版权所有 # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false #是否显示驱动 theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false #是否显示主题 # Version info of NexT after scheme info (vX.X.X). version: false 7、配置菜单按钮，在主题配置文件中，找到 menu 属性，做如下配置： 123456789101112131415161718# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).# Usage: `Key: /link/ || icon`# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.# Value before `||` delimeter is the target link.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.menu: home: / || home #首页，后面的表示图标 categories: /categories/ || th #分类 tags: /tags/ || tags #标签 archives: /archives/ || archive #归档 about: /about/ || user #关于 #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 8、到这里，网站基本信息的配置基本完成，但这时候本地测试时我们会发现，打开分类、标签、关于几个页面时会显示 404 错误，找不到页面，这是因为我们还没有创建相应的页面。在 Git Bash 窗口执行下面的命令，创建相应的页面即可，这时候我们会发现博客目录的 source 文件夹下已经生成了跳转页面的生成，如图所示： 123hexo new page &apos;categories&apos;hexo new page &apos;tags&apos;hexo new page &apos;about&apos; 9、每一个分类菜单都生成了一个 index.md 初始文件，默认包含了 title 和 date 字段，我们需要给每一 index.md 文件添加上 type 字段，如下图所示： 10、配置搜索菜单： （1）安装 hexo-generator-searchdb ，在 Git Bash 窗口执行一下命令 1npm install hexo-generator-searchdb --save （2）打开全局配置文件，新增下面代码 12345search: path: search.xml field: post format: html limit: 10000 （3）打开主题配置文件，找到 local_search 属性，开启本地搜索功能 1234567local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 11、到这里我们在 Git Bash窗口，执行以下命令，本地启动服务器预览博客，然后去浏览器地址栏访问就会发现，博客的主题更换和基本配置已经完成，如下图所示： 三、在 Hexo 博客发布文章并托管到 GitHub Pages1、永远的 Hello Hexo ：在 Git Bash 命令窗口执行下面的命令，新建一篇文章 “Hello Hexo”，到博客目录的 /source/_posts/ 文件夹下可以发现，已经生成了标题为 Hello-Hexo.md 的博客文件，如图所示，我们直接编辑自己的文章即可。 1hexo new &quot;Hello Hexo&quot; 特别提示：Hexo 发布的文章是 Markdown 格式的文件，如没使用过 Markdown 编辑器的同学，可以自行去学习一下 Markdown 语法，半小时基本可以掌握基本的语法了，推荐一个学习 Markdown 基本语法的网址： 点击前往 。 2、给文章添加分类和标签：直接在所要编辑文章的头部添加如下代码即可 123456---title: Hello Hexodate: 2018-03-23 09:09:19tags: [Hexo]categories: [Hexo]--- 注：多个分类和标签可以使用英文状态下的句号分隔。 3、本地启动，浏览器测试预览文章，如图所示： 4、添加阅读全文按钮：在文章的任意位置添加下面命令即可 1&lt;!--more--&gt; 5、所要发表的文章在本地预览无误后，在 Git Bash 命令窗口执行以下命令，发布到 GitHub Pages 上 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 6、上传成功后，在浏览器地址栏直接访问自己的域名： 直接访问，即可看到自己编写的文章已经发布到了 GitHub 上。并且每次发布文章到 GitHub 都需要执行下面的流程： Hexo clean Hexo g Hexo d]]></content>
      <categories>
        <category>Hexo</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>个人博客</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 Hexo + GitHub Pages 搭建个人博客（一）]]></title>
    <url>%2F2018%2F03%2F21%2F%E5%9F%BA%E4%BA%8E-Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[前言：我的博客写作之路 15 年刚上大学，第一次接触公众号，就萌生了创建一个公众号写点东西，但最终不了了之。 很快到了 16 年，开始接触网上各大博客网站，接触最多的当属 CSDN，萌生了注册一个博客，写一点自己在学习上遇到的问题，分享一些自己的解决办法，但最终还是不了了之。 16 年暑假，自媒体横行在全国各地，自己眼里似乎看到很多机会有似乎异常模糊。一个偶然的机会让我意识到必须开始弄个博客写点东西了，当时的想法是，先注册个头条号，16年下半年开学再弄博客写东西，这种事情不着急，时间一天天过，但这两件事最终都没做，不了了之。 时间一分一秒地到了17年，上半年这种注册博客，写博客的心态依然萦绕耳边，但并没有什么实际行动。 终于到了17年6月份左右，去了一个地方回来后，我手忙脚乱，立刻在网上的平台注册了一个博客，而后开始写自己学习上的东西。而后有急忙地注册了一个微信公众号，第一次开始使用键盘记录自己的学生和生活，而我拖延了2年半的博客与写作之路，也就从此开始。 网上的某博客平台广告很多，开始时我无从适应，不知道如何排版，加之打字速度与龟速相差不大，夸张点说就是，写一篇几百字的文章要一两个小时，开不知道自己写了什么东西，但也第一次知道了写作的收获如此之大，具体可以说上个三天三夜，这里略。 慢慢地开始有了搭建一个属于自己的个人博客，于是急功近利，浅藏辄止各种编程语言，最终无功而返，一事无成。 带着那门基础不扎实的 Java 语言，开始学习框架，搭建博客，尽管各种异常报错，乱码问题，还有点想放弃，却又不甘，因此目前也还在学习。 慢慢开始了 WordPress ，cnblogs ，简书，掘金等五花八门的信息筛选之中，最终还是选择了搭建一个 Hexo + GitHub Pages 的博客框架。 基于 Hexo + GitHub Page 搭建个人博客一、搭建前准备1、安装 Git：Git 是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 （1）下载 Git：官网下载地址 （各大系统版本都有 Git，这里以 Windows 版本为例） （2）双击下载的 Git 安装包开始安装 （3）一直点 Next，继续安装 ​ ​ ​（4）点击 Install ，完成安装​ ​（5）打开 cmd 命令窗口，执行以下命令，结果显示 Git 版本，安装成功 1git --version ​（6）、推荐两个学习 Git 的网站： 官方文档：点击这里前往 廖雪峰网站教程：点击这里前往 2、安装 Node.js：是一个基于 Chrome V8 引擎的 JavaScript 运行环境，轻量高效，Node.js 的包管理器 npm 是全球最大的开源库生态系统。 （1）下载 Node.js：官网下载地址 （各大系统版本都有，这里以 Windows 为例） （2）双击下载的 Node.js 安装包开始安装 （3）一直点 Next ，选择安装路径，继续安装​ ​（4）点击 Install ，完成安装​ ​（5）打开 cmd 命令窗口，执行以下命令，显示 Node.js 版本，安装成功 1node -v 二、搭建 Hexo 博客1、安装 Hexo，在电脑中新建一个 compassblog 文件夹存放自己的博客，在文件夹内右键点击 Git Bash 进入命令窗口，执行以下代码： 1npm install -g hexo-cli 结果如下图：​ 2、初始化 Hexo，得到 hexo 文件夹，用于存放 Hexo 博客所有的文件，包括下面会讲到的主题文件，Git Bash 窗口执行以下代码：（无特别提示，以下代码基本都在 Git Bash 命令窗口执行） 1hexo init hexo 结果如下图：​ 3、配置 Hexo，进入 hexo 文件夹安装依赖，部署形成的文件，分别执行以下代码： 123cd hexonpm installhexo generate 结果如下图：​ 4、启动服务器：执行以下代码，可以看到服务器端口号是 4000 1hexo server 结果如下图：按 Ctrl + C 可以停止服务器 5、打开浏览器，地址栏输入http://localhost:4000/ ，结果如下图，可以看到，初始化的 Hexo 博客搭建成功，可以访问 三、将初始化的 Hexo 博客部署到 GitHub Pages1、注册一个 Github 帐号，新建一个仓库，仓库名为：compassblog.github.io ，如下图所示：（由于我的仓库已经创建，所以会显示仓库已经存在，并且这个仓库的名称必须严格按照 username.github.io 的格式来命名） 2、进入已经建好的仓库，点击 settings ，找到 GitHub Pages 选项，点击 Choose a theme 选择一个主题，然后点击 select theme 选择主题，如下图所示：（到这一步其实已经可以在地址栏访问自己选择的主题了，选择主题这一步其实可以忽略，但我觉得 GitHub 提供的主题还是蛮酷的，所以就附上这一步吧） 3、配置 Git 个人信息：在 compassblog 目录打开一个 Git Bash 窗口，输入下面的命令 12git config --global user.name &quot; GitHub 用户名 &quot;git config --global user.email &quot; GitHub 邮箱 &quot; 如我的是如下图这样输入： 4、生成 SSH KEY，其实就是生成一个公钥和密钥，因为 GitHub 需要一个密钥才能与本地相连接。执行以下命令，并连续按 3 次回车生成密钥： 1ssh-keygen -t rsa -C &quot; 邮箱地址 &quot; 我电脑是如下图这样： 5、SSH KEY 生成之后会默认保存在 C:/Users/电脑名用户名/.ssh 目录中，打开这个目录，打开 id_rsa.pub 文件，复制全部内容，即复制密钥。 6、打开 GitHub ，依次点击 头像–&gt;Settings–&gt;SSH and GPG keys–&gt;New SSH key，将复制的密钥粘贴到 key 输入框，最后点击 Add Key ，SSH KEY 配置成功，如下图所示： 7、修改 hexo 文件夹下的 _config.yml 全局配置文件，修改 deploy 属性代码，将本地 hexo 项目托管到 GitHub 上，如下图所示： 12345deploy: type: git #部署的类型 repository: git@github.com:compassblog/compassblog.github.io.git # 仓库地址 branch: master #分支名称 message: hexo deploy #提交信息 8、执行下面的命令，安装 hexo-deployer-git 插件，快速把代码托管到 GitHub 上 1npm install hexo-deployer-git --sava 结果如图所示： 9、执行下面的代码命令，将 hexo 项目托管到 GitHub 上 1hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy 注：hexo generate 可缩写为 hexo g ， hexo deploy 可缩写为 hexo d 结果如图所示： 10、浏览器地址栏输入 https://username.github.io/ 访问，可以看到博客已经部署到 GitHub 上，正常访问，如下图所示： 最后写几句我本来想一次把这个基于 Hexo + GitHub Pages 搭建个人博客流程发布在一篇文章上面发布出来的，但实在是太长了，很难一篇文章写完。关于博客如何更换主题，如何进行个性更换，具体的配置等等很多的配置，后面找时间再持续的发布出来，欢迎关注，Thanks 。]]></content>
      <categories>
        <category>Hexo</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>个人博客</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2F2018%2F03%2F20%2FHello-Hexo%2F</url>
    <content type="text"><![CDATA[Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。 1Hexo：快速、简洁且高效的博客框架 Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染 Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件 只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站 1Hexo 拥有强大的插件系统，安装插件可以让 Hxo 支持 Jade, CoffeeScript 点击前往我的GitHub点击前往我的CSND点击前往我的cnblogs点击前往我的掘金点击前往我的简书点击前往我的知乎]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
